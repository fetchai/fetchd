// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fetchai/ssi/verifiable-credential/crypto/anonymouscredential/anonymous-credential.proto

package anonymouscredential

import (
	fmt "fmt"
	accumulator "github.com/fetchai/fetchd/x/verifiable-credential/crypto/accumulator"
	bbsplus "github.com/fetchai/fetchd/x/verifiable-credential/crypto/bbsplus"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrivateKey struct {
	BbsPlusKey     *bbsplus.PrivateKey     `protobuf:"bytes,1,opt,name=bbs_plus_key,json=bbsPlusKey,proto3" json:"bbs_plus_key,omitempty"`
	AccumulatorKey *accumulator.PrivateKey `protobuf:"bytes,2,opt,name=accumulator_key,json=accumulatorKey,proto3" json:"accumulator_key,omitempty"`
}

func (m *PrivateKey) Reset()         { *m = PrivateKey{} }
func (m *PrivateKey) String() string { return proto.CompactTextString(m) }
func (*PrivateKey) ProtoMessage()    {}
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f0e92a2127cd25e, []int{0}
}
func (m *PrivateKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateKey.Merge(m, src)
}
func (m *PrivateKey) XXX_Size() int {
	return m.Size()
}
func (m *PrivateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateKey.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateKey proto.InternalMessageInfo

func (m *PrivateKey) GetBbsPlusKey() *bbsplus.PrivateKey {
	if m != nil {
		return m.BbsPlusKey
	}
	return nil
}

func (m *PrivateKey) GetAccumulatorKey() *accumulator.PrivateKey {
	if m != nil {
		return m.AccumulatorKey
	}
	return nil
}

type PublicParameters struct {
	BbsPlusPublicParams     *bbsplus.PublicParameters     `protobuf:"bytes,1,opt,name=bbs_plus_public_params,json=bbsPlusPublicParams,proto3" json:"bbs_plus_public_params,omitempty"`
	AccumulatorPublicParams *accumulator.PublicParameters `protobuf:"bytes,2,opt,name=accumulator_public_params,json=accumulatorPublicParams,proto3" json:"accumulator_public_params,omitempty"`
}

func (m *PublicParameters) Reset()         { *m = PublicParameters{} }
func (m *PublicParameters) String() string { return proto.CompactTextString(m) }
func (*PublicParameters) ProtoMessage()    {}
func (*PublicParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f0e92a2127cd25e, []int{1}
}
func (m *PublicParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicParameters.Merge(m, src)
}
func (m *PublicParameters) XXX_Size() int {
	return m.Size()
}
func (m *PublicParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicParameters.DiscardUnknown(m)
}

var xxx_messageInfo_PublicParameters proto.InternalMessageInfo

func (m *PublicParameters) GetBbsPlusPublicParams() *bbsplus.PublicParameters {
	if m != nil {
		return m.BbsPlusPublicParams
	}
	return nil
}

func (m *PublicParameters) GetAccumulatorPublicParams() *accumulator.PublicParameters {
	if m != nil {
		return m.AccumulatorPublicParams
	}
	return nil
}

type Credential struct {
	BbsPlusSignature             []byte `protobuf:"bytes,1,opt,name=bbs_plus_signature,json=bbsPlusSignature,proto3" json:"bbs_plus_signature,omitempty"`
	AccumulatorMembershipWitness []byte `protobuf:"bytes,2,opt,name=accumulator_membership_witness,json=accumulatorMembershipWitness,proto3" json:"accumulator_membership_witness,omitempty"`
}

func (m *Credential) Reset()         { *m = Credential{} }
func (m *Credential) String() string { return proto.CompactTextString(m) }
func (*Credential) ProtoMessage()    {}
func (*Credential) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f0e92a2127cd25e, []int{2}
}
func (m *Credential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Credential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Credential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Credential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credential.Merge(m, src)
}
func (m *Credential) XXX_Size() int {
	return m.Size()
}
func (m *Credential) XXX_DiscardUnknown() {
	xxx_messageInfo_Credential.DiscardUnknown(m)
}

var xxx_messageInfo_Credential proto.InternalMessageInfo

func (m *Credential) GetBbsPlusSignature() []byte {
	if m != nil {
		return m.BbsPlusSignature
	}
	return nil
}

func (m *Credential) GetAccumulatorMembershipWitness() []byte {
	if m != nil {
		return m.AccumulatorMembershipWitness
	}
	return nil
}

type AnonymousCredentialProof struct {
	Nonce              []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Challenge          []byte `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	BbsPlusProof       []byte `protobuf:"bytes,3,opt,name=bbs_plus_proof,json=bbsPlusProof,proto3" json:"bbs_plus_proof,omitempty"`
	AccumulatorEntropy []byte `protobuf:"bytes,4,opt,name=accumulator_entropy,json=accumulatorEntropy,proto3" json:"accumulator_entropy,omitempty"`
	AccumulatorProof   []byte `protobuf:"bytes,5,opt,name=accumulator_proof,json=accumulatorProof,proto3" json:"accumulator_proof,omitempty"`
}

func (m *AnonymousCredentialProof) Reset()         { *m = AnonymousCredentialProof{} }
func (m *AnonymousCredentialProof) String() string { return proto.CompactTextString(m) }
func (*AnonymousCredentialProof) ProtoMessage()    {}
func (*AnonymousCredentialProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f0e92a2127cd25e, []int{3}
}
func (m *AnonymousCredentialProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnonymousCredentialProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnonymousCredentialProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnonymousCredentialProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymousCredentialProof.Merge(m, src)
}
func (m *AnonymousCredentialProof) XXX_Size() int {
	return m.Size()
}
func (m *AnonymousCredentialProof) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymousCredentialProof.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymousCredentialProof proto.InternalMessageInfo

func (m *AnonymousCredentialProof) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *AnonymousCredentialProof) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *AnonymousCredentialProof) GetBbsPlusProof() []byte {
	if m != nil {
		return m.BbsPlusProof
	}
	return nil
}

func (m *AnonymousCredentialProof) GetAccumulatorEntropy() []byte {
	if m != nil {
		return m.AccumulatorEntropy
	}
	return nil
}

func (m *AnonymousCredentialProof) GetAccumulatorProof() []byte {
	if m != nil {
		return m.AccumulatorProof
	}
	return nil
}

func init() {
	proto.RegisterType((*PrivateKey)(nil), "fetchai.verifiablecredential.crypto.anonymouscredential.PrivateKey")
	proto.RegisterType((*PublicParameters)(nil), "fetchai.verifiablecredential.crypto.anonymouscredential.PublicParameters")
	proto.RegisterType((*Credential)(nil), "fetchai.verifiablecredential.crypto.anonymouscredential.Credential")
	proto.RegisterType((*AnonymousCredentialProof)(nil), "fetchai.verifiablecredential.crypto.anonymouscredential.AnonymousCredentialProof")
}

func init() {
	proto.RegisterFile("fetchai/ssi/verifiable-credential/crypto/anonymouscredential/anonymous-credential.proto", fileDescriptor_3f0e92a2127cd25e)
}

var fileDescriptor_3f0e92a2127cd25e = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0xb3, 0xd5, 0x0a, 0x3e, 0x43, 0xad, 0x53, 0xd1, 0x58, 0xca, 0x22, 0xc1, 0x83, 0xa0,
	0x66, 0x41, 0x0f, 0x3d, 0x88, 0x42, 0xfd, 0x75, 0xa9, 0xc2, 0x12, 0x0f, 0x45, 0x2f, 0x61, 0x66,
	0xf3, 0x92, 0x0c, 0xee, 0xce, 0x2c, 0x33, 0xb3, 0xd5, 0x3d, 0x08, 0x5e, 0xbc, 0xfb, 0x67, 0x79,
	0x11, 0x8a, 0x27, 0x8f, 0x92, 0xfc, 0x23, 0xb2, 0x33, 0xfb, 0x63, 0x5a, 0x3c, 0x24, 0xa7, 0x49,
	0xde, 0x7b, 0x7c, 0xbe, 0xdf, 0xef, 0x9b, 0x4c, 0xe0, 0x64, 0x86, 0x26, 0x59, 0x50, 0x1e, 0x69,
	0xcd, 0xa3, 0x53, 0x54, 0x7c, 0xc6, 0x29, 0x4b, 0xf1, 0x51, 0xa2, 0x70, 0x8a, 0xc2, 0x70, 0x9a,
	0x46, 0x89, 0x2a, 0x73, 0x23, 0x23, 0x2a, 0xa4, 0x28, 0x33, 0x59, 0x68, 0xaf, 0xd5, 0xd6, 0xbc,
	0xf9, 0x51, 0xae, 0xa4, 0x91, 0xe4, 0xb0, 0x06, 0x8f, 0x3a, 0xa8, 0x37, 0xe3, 0x98, 0xa3, 0xff,
	0x30, 0xf7, 0x9f, 0xaf, 0xed, 0x88, 0x31, 0x9d, 0xa7, 0x85, 0x6e, 0x4e, 0x27, 0xbc, 0xff, 0x66,
	0xfd, 0x44, 0x49, 0x52, 0x64, 0x45, 0x4a, 0x8d, 0x54, 0xfe, 0x67, 0xc7, 0x19, 0xfe, 0x0a, 0x00,
	0x62, 0xc5, 0x4f, 0xa9, 0xc1, 0x63, 0x2c, 0xc9, 0x07, 0xe8, 0x33, 0xa6, 0x27, 0x95, 0xd0, 0xe4,
	0x13, 0x96, 0x83, 0xe0, 0x6e, 0x70, 0xff, 0xda, 0xe3, 0xc3, 0xd1, 0x3a, 0x31, 0x1b, 0x83, 0x1d,
	0x6e, 0x0c, 0x8c, 0xe9, 0x38, 0x2d, 0x74, 0x85, 0x9e, 0xc2, 0x75, 0x4f, 0xde, 0xd2, 0xb7, 0x2c,
	0xfd, 0xe9, 0x5a, 0x74, 0xdf, 0xba, 0xa7, 0xb0, 0xe3, 0xd5, 0x8f, 0xb1, 0x1c, 0x7e, 0xdf, 0x82,
	0xdd, 0xb8, 0x60, 0x29, 0x4f, 0x62, 0xaa, 0x68, 0x86, 0x06, 0x95, 0x26, 0x0a, 0x6e, 0xb5, 0xa9,
	0x72, 0xdb, 0x9c, 0xe4, 0x55, 0x57, 0xd7, 0xf9, 0x9e, 0x6d, 0x96, 0xef, 0x02, 0x7e, 0xbc, 0x57,
	0xa7, 0xf4, 0x1a, 0x9a, 0x7c, 0x85, 0x3b, 0x7e, 0xdc, 0xf3, 0xb2, 0x2e, 0xf8, 0xd1, 0xe6, 0xc1,
	0x2f, 0x4a, 0xdf, 0xf6, 0xba, 0xbe, 0xfc, 0xf0, 0x5b, 0x00, 0xf0, 0xb2, 0x65, 0x91, 0x87, 0x40,
	0xda, 0x0d, 0x68, 0x3e, 0x17, 0xd4, 0x14, 0x0a, 0x6d, 0xfa, 0xfe, 0x78, 0xb7, 0xb6, 0xff, 0xbe,
	0xa9, 0x93, 0x57, 0x10, 0xfa, 0xde, 0x33, 0xcc, 0x18, 0x2a, 0xbd, 0xe0, 0xf9, 0xe4, 0x33, 0x37,
	0x02, 0xb5, 0x0b, 0xd0, 0x1f, 0x1f, 0x78, 0x53, 0xef, 0xda, 0xa1, 0x13, 0x37, 0x33, 0xfc, 0x1d,
	0xc0, 0xe0, 0xa8, 0xf9, 0xe9, 0x77, 0x5e, 0x62, 0x25, 0xe5, 0x8c, 0xdc, 0x84, 0x6d, 0x21, 0x45,
	0xd2, 0x78, 0x70, 0x5f, 0xc8, 0x01, 0x5c, 0x4d, 0x16, 0x34, 0x4d, 0x51, 0xcc, 0xb1, 0xd6, 0xe8,
	0x0a, 0xe4, 0x1e, 0xec, 0x74, 0xd7, 0x58, 0x51, 0x06, 0x97, 0xec, 0x48, 0xbf, 0xd9, 0xbf, 0x25,
	0x47, 0xb0, 0xe7, 0x9b, 0x47, 0x61, 0x94, 0xcc, 0xcb, 0xc1, 0x65, 0x3b, 0x4a, 0xbc, 0xd6, 0x6b,
	0xd7, 0x21, 0x0f, 0xe0, 0xc6, 0xb9, 0x9b, 0xb2, 0xe4, 0x6d, 0xb7, 0x1a, 0x7f, 0xbd, 0x55, 0xfd,
	0xc5, 0xec, 0xe7, 0x32, 0x0c, 0xce, 0x96, 0x61, 0xf0, 0x77, 0x19, 0x06, 0x3f, 0x56, 0x61, 0xef,
	0x6c, 0x15, 0xf6, 0xfe, 0xac, 0xc2, 0xde, 0xc7, 0xb7, 0x73, 0x6e, 0x16, 0x05, 0x1b, 0x25, 0x32,
	0x8b, 0x9a, 0xc7, 0x69, 0xcf, 0x69, 0xf4, 0x65, 0xe3, 0xff, 0x1c, 0x76, 0xc5, 0x3e, 0xcf, 0x27,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x54, 0xb4, 0x2c, 0x7d, 0xba, 0x04, 0x00, 0x00,
}

func (m *PrivateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccumulatorKey != nil {
		{
			size, err := m.AccumulatorKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnonymousCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BbsPlusKey != nil {
		{
			size, err := m.BbsPlusKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnonymousCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublicParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccumulatorPublicParams != nil {
		{
			size, err := m.AccumulatorPublicParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnonymousCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BbsPlusPublicParams != nil {
		{
			size, err := m.BbsPlusPublicParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnonymousCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Credential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Credential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccumulatorMembershipWitness) > 0 {
		i -= len(m.AccumulatorMembershipWitness)
		copy(dAtA[i:], m.AccumulatorMembershipWitness)
		i = encodeVarintAnonymousCredential(dAtA, i, uint64(len(m.AccumulatorMembershipWitness)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BbsPlusSignature) > 0 {
		i -= len(m.BbsPlusSignature)
		copy(dAtA[i:], m.BbsPlusSignature)
		i = encodeVarintAnonymousCredential(dAtA, i, uint64(len(m.BbsPlusSignature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AnonymousCredentialProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnonymousCredentialProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnonymousCredentialProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccumulatorProof) > 0 {
		i -= len(m.AccumulatorProof)
		copy(dAtA[i:], m.AccumulatorProof)
		i = encodeVarintAnonymousCredential(dAtA, i, uint64(len(m.AccumulatorProof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AccumulatorEntropy) > 0 {
		i -= len(m.AccumulatorEntropy)
		copy(dAtA[i:], m.AccumulatorEntropy)
		i = encodeVarintAnonymousCredential(dAtA, i, uint64(len(m.AccumulatorEntropy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BbsPlusProof) > 0 {
		i -= len(m.BbsPlusProof)
		copy(dAtA[i:], m.BbsPlusProof)
		i = encodeVarintAnonymousCredential(dAtA, i, uint64(len(m.BbsPlusProof)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Challenge) > 0 {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintAnonymousCredential(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintAnonymousCredential(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAnonymousCredential(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnonymousCredential(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrivateKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BbsPlusKey != nil {
		l = m.BbsPlusKey.Size()
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	if m.AccumulatorKey != nil {
		l = m.AccumulatorKey.Size()
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	return n
}

func (m *PublicParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BbsPlusPublicParams != nil {
		l = m.BbsPlusPublicParams.Size()
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	if m.AccumulatorPublicParams != nil {
		l = m.AccumulatorPublicParams.Size()
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	return n
}

func (m *Credential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BbsPlusSignature)
	if l > 0 {
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	l = len(m.AccumulatorMembershipWitness)
	if l > 0 {
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	return n
}

func (m *AnonymousCredentialProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	l = len(m.BbsPlusProof)
	if l > 0 {
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	l = len(m.AccumulatorEntropy)
	if l > 0 {
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	l = len(m.AccumulatorProof)
	if l > 0 {
		n += 1 + l + sovAnonymousCredential(uint64(l))
	}
	return n
}

func sovAnonymousCredential(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnonymousCredential(x uint64) (n int) {
	return sovAnonymousCredential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrivateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnonymousCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BbsPlusKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BbsPlusKey == nil {
				m.BbsPlusKey = &bbsplus.PrivateKey{}
			}
			if err := m.BbsPlusKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatorKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccumulatorKey == nil {
				m.AccumulatorKey = &accumulator.PrivateKey{}
			}
			if err := m.AccumulatorKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnonymousCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnonymousCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BbsPlusPublicParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BbsPlusPublicParams == nil {
				m.BbsPlusPublicParams = &bbsplus.PublicParameters{}
			}
			if err := m.BbsPlusPublicParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatorPublicParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccumulatorPublicParams == nil {
				m.AccumulatorPublicParams = &accumulator.PublicParameters{}
			}
			if err := m.AccumulatorPublicParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnonymousCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnonymousCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BbsPlusSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BbsPlusSignature = append(m.BbsPlusSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.BbsPlusSignature == nil {
				m.BbsPlusSignature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatorMembershipWitness", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatorMembershipWitness = append(m.AccumulatorMembershipWitness[:0], dAtA[iNdEx:postIndex]...)
			if m.AccumulatorMembershipWitness == nil {
				m.AccumulatorMembershipWitness = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnonymousCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnonymousCredentialProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnonymousCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnonymousCredentialProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnonymousCredentialProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = append(m.Challenge[:0], dAtA[iNdEx:postIndex]...)
			if m.Challenge == nil {
				m.Challenge = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BbsPlusProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BbsPlusProof = append(m.BbsPlusProof[:0], dAtA[iNdEx:postIndex]...)
			if m.BbsPlusProof == nil {
				m.BbsPlusProof = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatorEntropy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatorEntropy = append(m.AccumulatorEntropy[:0], dAtA[iNdEx:postIndex]...)
			if m.AccumulatorEntropy == nil {
				m.AccumulatorEntropy = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatorProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulatorProof = append(m.AccumulatorProof[:0], dAtA[iNdEx:postIndex]...)
			if m.AccumulatorProof == nil {
				m.AccumulatorProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnonymousCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnonymousCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnonymousCredential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnonymousCredential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnonymousCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnonymousCredential
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnonymousCredential
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnonymousCredential
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnonymousCredential        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnonymousCredential          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnonymousCredential = fmt.Errorf("proto: unexpected end of group")
)
