syntax = "proto3";
package fetchai.verifiablecredential;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "fetchai/ssi/verifiable-credential/crypto/anonymouscredential/anonymous-credential.proto";
option go_package = "github.com/fetchai/fetchd/x/verifiable-credential/types";

/*
Credentials are a part of our daily lives; driver's licenses are used to assert
that we are capable of operating a motor vehicle, university degrees can be used
to assert our level of education, and government-issued passports enable us to
travel between countries. This proto file provides a mechanism to express
these sorts of credentials on a blockchain in a way that is cryptographically
secure, privacy respecting, and machine-verifiable.

This data structure represents a verifiable credential
definition: https://w3c.github.io/vc-data-model/
{
  "@context": [
    "https://www.w3.org/2018/credentials/v1",
    "https://www.w3.org/2018/credentials/examples/v1"
  ],
  "id": "http://example.edu/credentials/1872",
  "type": ["VerifiableCredential", "AlumniCredential"],
  "issuer": "https://example.edu/issuers/565049",
  "issuanceDate": "2010-01-01T19:73:24Z",
  "credentialSubject": {
    "id": "did:example:ebfeb1f712ebc6f1c276e12ec21",
    "alumniOf": {
      "id": "did:example:c276e12ec21ebfeb1f712ebc6f1",
      "name": [{
        "value": "Example University",
        "lang": "en"
      }, {
        "value": "Exemple d'Universit√©",
        "lang": "fr"
      }]
    }
  },
  "proof": {
    "type": "RsaSignature2018",
    "created": "2017-06-18T21:19:10Z",
    "proofPurpose": "assertionMethod",
    "verificationMethod": "https://example.edu/issuers/keys/1",
    "jws": "eyJhbGciOiJSUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TCYt5X
      sITJX1CxPCT8yAV-TVkIEq_PbChOMqsLfRoPsnsgw5WEuts01mq-pQy7UJiN5mgRxD-WUc
      X16dUEMGlv50aqzpqh4Qktb3rk-BuQy72IFLOqV0G_zS245-kronKb78cPN25DGlcTwLtj
      PAYuNzVBAh4vGHSrQyHUdBBPM"
  }
}
*/

// VerifiableCredential represents a verifiable credential
message VerifiableCredential {
  // @context is spec for verifiable credential.
  repeated string context = 1 [(gogoproto.jsontag) = "@context,omitempty"];

  // The value of the id property MUST be a single URI. It is RECOMMENDED
  // that the URI in the id be one which, if dereferenced, results in a
  // document containing machine-readable information about the id.
  string id = 2;

  // The value of the type property MUST be, or map to (through interpretation
  // of the @context property), one or more URIs. If more than one URI is
  // provided, the URIs MUST be interpreted as an unordered set.
  repeated string type = 3;

  // The value of the issuer property MUST be either a URI or an object
  // containing an id property. It is RECOMMENDED that the URI in the issuer
  // or its id be one which, if dereferenced, results in a document containing
  // machine-readable information about the issuer that can be used to verify
  // the information expressed in the credential.
  string issuer = 4;

  // A credential MUST have an issuanceDate property. The value of the issuanceDate
  // property MUST be a string value of an [RFC3339] combined date and time string
  // representing the date and time the credential becomes valid, which could
  // be a date and time in the future. Note that this value represents the earliest
  // point in time at which the information associated with the credentialSubject
  // property becomes valid.
  google.protobuf.Timestamp issuance_date = 5 [(gogoproto.stdtime) = true];
  // The value of the credentialSubject property is defined as a set of
  // objects that contain one or more properties that are each related
  // to a subject of the verifiable credential.
  oneof credential_subject {
    // The value of license_cred represents a registration issued by a regulatory
    // body. The license is used to describe the entity that require a license.
    RegistrationCredentialSubject registration_cred = 6;

    // The value of user_cred represents a privacy respecting verifiable
    // credential. This is used when adding sensitive information about
    // a credential subject. It allows the credential subject to create
    // and validate proofs about what is contained in a credential without
    // revealing the values contained in the credential otherwise known as
    // selective disclosure.
    UserCredentialSubject user_cred = 7;

    // The value of anon_cred_schema represents a set of public parameters created by the issuer.
    // For example, the public parameters can be BBS+ public parameters which are used to verify anonymous credentials
    AnonymousCredentialSchemaSubject anon_cred_schema = 8;
  };

  // One or more cryptographic proofs that can be used to detect tampering
  // and verify the authorship of a credential or presentation. The specific
  // method used for an embedded proof MUST be included using the type property.
  Proof proof = 9;
}

message AnonymousCredentialSchemaSubject {
  // dummy id for compatibility with other types of credentials
  string id = 1;
  repeated string type = 2;
  repeated string context = 3;
  crypto.anonymouscredential.PublicParameters public_params = 4;
}

// UserCredentialSubject represents a privacy respecting
// credential_subject of a verifiable credential. This
// is used as an on chain verifiable credential.
message UserCredentialSubject {
  string id = 1;
  string root = 2;
  bool is_verified = 3;
}


// RegistrationCredentialSubject is used to identify a business entity
// https://github.com/allinbits/cosmos-cash/v3/blob/main/docs/Explanation/ADR/adr-005-registration-credential.md
message RegistrationCredentialSubject {
  // The value of id represents the ID of the credential_subject
  string id = 1;
  Address address = 2;
  repeated Id ids = 3;
  repeated LegalPerson legal_persons = 4;
}

message LegalPerson {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  repeated Name names = 1;
  string ctry_reg = 2;
}


message Name {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string name = 1;
  string type = 2;
}

message Address {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  string addr_type = 1;
  string thfare = 2;
  string premise = 3;
  string postcode = 4;
  string locality = 5;
  string country = 6;
}

message Id {
  string id = 1;
  string type = 2;
}


// The Proof message represents a cryptographic proof that the 
// credential has not been tampered with or changed without the issuersi
// knowledge. This can be used to verify the verifiable credential.
message Proof {
  string type = 1;
  string created = 2;
  string proof_purpose = 3;
  string verification_method = 4;
  string signature = 5;
}


// VcMetadata defines metadata associated to a verifiable credential document
message VcMetadata {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters)  = false;

  string versionId                  = 1;
  google.protobuf.Timestamp created = 2 [(gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated = 3 [(gogoproto.stdtime) = true];
  bool deactivated                  = 4;
}
